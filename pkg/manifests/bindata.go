// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster-dns-cr.yaml (272B)
// assets/dns/cluster-role-binding.yaml (223B)
// assets/dns/cluster-role.yaml (210B)
// assets/dns/configmap.yaml (414B)
// assets/dns/daemonset.yaml (4.46kB)
// assets/dns/namespace.yaml (63B)
// assets/dns/service-account.yaml (85B)
// assets/dns/service.yaml (359B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsClusterDnsCrYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xce\x31\x4f\xc4\x30\x0c\xc5\xf1\x3d\x9f\xe2\x49\x37\x5f\xd1\xad\x5d\x81\x81\x85\x05\x89\xdd\x24\xaf\xd4\x90\x3a\x51\xec\x9e\x04\x9f\x1e\x1d\x74\x63\xb5\xf4\xf3\xfb\x9f\xf0\x64\x1e\x52\x2b\x07\x72\xb3\x45\xdf\xe1\x9d\x59\x17\xcd\xb8\x4a\xdd\xe9\x90\x41\x48\xef\x55\x59\x20\x81\xb1\x5b\xe8\xc6\x29\x49\xd7\x57\x0e\xd7\x66\x33\x8a\xf9\xd4\x3a\xcd\x57\x5d\x62\xd2\x76\x77\xbd\x48\xed\xab\x5c\xd2\xa7\x5a\x99\x71\x5f\x77\x0f\x8e\x87\xe7\x97\xb4\x31\xa4\x48\xc8\x9c\x00\x93\x8d\x33\x0a\x17\xd9\x6b\x24\xe0\x84\x47\xf3\x7d\x10\xb1\x4a\xa0\x59\xfd\x42\xac\x44\xeb\x1c\x12\x6d\x20\x8b\xa1\xb0\x32\xf8\x7b\x3f\x20\xf2\xdf\xf7\x5b\x05\xda\xdb\x07\x73\x4c\x09\x58\xd4\xa4\xea\x37\x87\xdf\xa6\xce\xff\x1b\x0f\x7e\x3e\xf8\xb9\x98\xa7\x9f\x00\x00\x00\xff\xff\x80\xcf\x00\x9a\x10\x01\x00\x00")

func assetsClusterDnsCrYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsClusterDnsCrYaml,
		"assets/cluster-dns-cr.yaml",
	)
}

func assetsClusterDnsCrYaml() (*asset, error) {
	bytes, err := assetsClusterDnsCrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/cluster-dns-cr.yaml", size: 272, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0x8c, 0x3f, 0x9d, 0xbf, 0xdf, 0x20, 0x18, 0xb3, 0xee, 0x79, 0xe5, 0x42, 0x94, 0xc0, 0x4e, 0xe2, 0x6a, 0x3a, 0xac, 0x4f, 0xdf, 0x31, 0xec, 0x44, 0x1a, 0x5, 0x4c, 0xf0, 0xbd, 0xf, 0xc9}}
	return a, nil
}

var _assetsDnsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x31\x8e\x83\x40\x0c\x05\xd0\x7e\x4e\xe1\x0b\xc0\x6a\xbb\xd5\x74\x9b\xdc\x80\x48\xe9\xcd\x8c\x09\x0e\x60\xa3\xb1\x87\x22\xa7\x8f\x10\x4a\x45\x3a\x17\xfe\xff\xfd\x89\x25\x47\xb8\xce\xd5\x9c\x4a\xa7\x33\x5d\x58\x32\xcb\x23\xe0\xca\x77\x2a\xc6\x2a\x11\x4a\x8f\xa9\xc5\xea\xa3\x16\x7e\xa1\xb3\x4a\x3b\xfd\x59\xcb\xfa\xb3\xfd\x86\x85\x1c\x33\x3a\xc6\x00\x00\x20\xb8\x50\x04\x5d\x49\x6c\xe4\xc1\x9b\x2c\x16\xac\xf6\x4f\x4a\x6e\x31\x34\x70\x78\x37\x2a\x1b\x27\xfa\x4f\x49\xab\x78\xf8\xc4\xf6\xe7\xe3\xb6\x15\xd3\xa9\xa7\xe8\x4c\x1d\x0d\x3b\x74\x9a\x1d\xbe\xd3\xef\x00\x00\x00\xff\xff\xfa\x62\xe7\x50\xdf\x00\x00\x00")

func assetsDnsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleBindingYaml,
		"assets/dns/cluster-role-binding.yaml",
	)
}

func assetsDnsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role-binding.yaml", size: 223, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xf6, 0x2a, 0x3b, 0x84, 0xd7, 0x3e, 0xc4, 0xe1, 0x70, 0x66, 0x31, 0xda, 0xc4, 0x2f, 0x53, 0x27, 0x29, 0x13, 0xfe, 0x80, 0x36, 0xc5, 0xa1, 0x70, 0xdc, 0x2d, 0xef, 0xcf, 0xe0, 0xc4, 0xeb}}
	return a, nil
}

var _assetsDnsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\xbd\x6e\xc5\x30\x08\x46\x77\x3f\x05\xba\x7b\x52\x75\xab\xbc\x76\xe8\xde\xa1\x3b\xd7\xa6\x0a\x8a\x03\x16\xe0\x54\xea\xd3\x5f\xe5\x67\x3b\xe7\x08\xf4\xad\x2c\x35\xc3\x67\x1b\x1e\x64\xdf\xda\x28\x61\xe7\x1f\x32\x67\x95\x0c\xf6\xc4\x32\xe3\x88\x45\x8d\xff\x31\x58\x65\x5e\x3f\x7c\x66\x7d\xdb\xdf\xd3\x46\x81\x15\x03\x73\x02\x10\xdc\x28\x83\x76\x12\x5f\xf8\x37\xa6\x2a\x9e\x6c\x34\xf2\x9c\x26\xc0\xce\x5f\xa6\xa3\xfb\x71\x39\xc1\xe3\x91\x00\x8c\x5c\x87\x15\xba\x1b\x49\xed\xca\x12\x7e\x9a\x93\xed\x5c\xe8\x92\xae\xf5\x82\x63\xc3\x3b\x5e\x7d\x27\x7b\xde\xbf\x8d\x3d\x4e\xf8\xc3\x28\x4b\x7a\x05\x00\x00\xff\xff\xcb\xdd\xd7\x2a\xd2\x00\x00\x00")

func assetsDnsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleYaml,
		"assets/dns/cluster-role.yaml",
	)
}

func assetsDnsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role.yaml", size: 210, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0xb2, 0x0, 0x7d, 0x4a, 0xd9, 0xf, 0x8, 0x44, 0xe7, 0xab, 0x82, 0xe4, 0x50, 0x94, 0xaa, 0x4e, 0xfd, 0xa0, 0x63, 0xba, 0x18, 0xcf, 0xeb, 0xa6, 0xe4, 0x2d, 0x4, 0x35, 0xd5, 0xc7, 0xd}}
	return a, nil
}

var _assetsDnsConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8c\xbd\x4e\x2b\x31\x10\x85\xfb\x7d\x8a\x23\xdd\x3a\x9b\x1b\xad\x82\x84\xdb\xd4\x50\xd2\x0f\xf6\x6c\x6c\xc5\x6b\x5b\x33\xe3\x08\x04\xbc\x3b\x0a\x11\x0b\x91\x98\xea\xfc\xcd\x77\x4a\x25\x38\x1c\x6a\x99\xd3\xf1\x81\xda\x40\x2d\x3d\xb1\x68\xaa\xc5\xe1\xbc\x1b\x16\x36\x0a\x64\xe4\x06\xe0\x1f\x1e\x69\x61\x24\x85\xb2\x81\x0c\xd2\x8b\xa5\x85\x07\xa0\xd0\xc2\xda\xc8\xb3\x43\x6d\x5c\x34\xa6\xd9\x36\xa1\xe8\xf0\xfd\x7b\xa8\xc2\x73\xca\xec\xf0\x3e\x00\xc0\xe8\xf6\xd3\x7e\xc2\xdb\x97\xb9\x1c\x8b\x54\xd1\xd5\x46\xa6\x6c\x71\xb5\xa7\xfe\xcc\x52\xd8\x58\xe1\x73\x57\x63\x19\x73\xf5\x94\x91\xca\x86\x42\x90\x91\xa4\x11\x52\xbb\xbb\x8a\x1f\xec\xe5\x5a\x0d\x8a\x54\x94\x7d\x17\xbe\x69\x7a\x53\x13\xa6\xe5\x26\x9c\x29\x67\x8b\x52\xfb\x31\xfe\x8d\x5f\xd7\x1f\xab\x6a\x52\x17\xb6\xc8\x5d\xe1\xee\x77\xfb\xe9\x77\xf1\xf2\x8a\x11\x5b\x36\xbf\x15\xd6\x9a\xcf\xa3\xaf\x65\x5e\x07\x9e\x7c\x64\x4c\xff\xd7\x40\x38\x57\x0a\xc3\x95\xff\x19\x00\x00\xff\xff\x9d\x46\xa5\xbd\x9e\x01\x00\x00")

func assetsDnsConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsConfigmapYaml,
		"assets/dns/configmap.yaml",
	)
}

func assetsDnsConfigmapYaml() (*asset, error) {
	bytes, err := assetsDnsConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/configmap.yaml", size: 414, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfc, 0x1, 0xd4, 0x58, 0x84, 0x9f, 0xd5, 0x7c, 0x6e, 0x3d, 0xae, 0xb7, 0x68, 0x6d, 0x82, 0x4e, 0x8d, 0x2c, 0x2e, 0x47, 0x59, 0xd1, 0x1, 0x2b, 0xaa, 0xfc, 0xbc, 0x7a, 0xa1, 0x89, 0x1e, 0x47}}
	return a, nil
}

var _assetsDnsDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x6d\x6f\xdb\x38\x12\xfe\xee\x5f\xf1\xac\x12\xf4\x05\x57\x35\xc9\x2d\xba\xb7\xa7\x36\x7b\x9b\x4b\x9c\x6b\x70\x4d\x62\xc4\xee\xde\x87\x20\x28\x68\x6a\x14\xf1\x42\x91\x5c\x92\x52\x6a\xa4\xf9\xef\x07\x4a\x91\x4d\xd9\x6e\x16\x07\xac\xbe\xb4\xe6\xcc\x3c\x9c\xb7\x67\x48\xe6\x4e\xa8\x3c\xc3\x09\xa3\x4a\xab\x29\xf9\x11\x33\xe2\x37\xb2\x4e\x68\x95\x81\x19\xe3\xf6\x9a\x83\x51\x45\x9e\xe5\xcc\xb3\x6c\x04\xec\xe0\x82\x55\x04\xe1\xe0\xc8\x83\x79\xd8\x5a\x79\x51\xd1\x08\x50\xac\x22\x67\x18\xa7\x0c\xda\x90\x72\xa5\x28\x7c\x9a\x2b\x37\x02\x24\x9b\x93\x74\xc1\x1e\x91\x8c\x19\x93\x21\x28\x38\x43\x3c\x08\x1d\x49\xe2\x5e\xdb\x4e\xb1\x62\x9e\x97\x9f\x22\xcb\xad\xb6\x80\xa7\xca\x48\xe6\xe9\xc9\x2a\x72\x36\x7c\x72\x00\xf0\x1d\x08\xa0\x77\xa1\xfd\x3f\xd9\x46\x70\x3a\xe2\x5c\xd7\xca\x87\x78\x57\x7a\x80\xb1\x42\x5b\xe1\x17\xc7\x92\x39\xd7\x09\xdd\xc2\x79\xaa\x52\xa5\x73\x4a\xb9\x15\x5e\x70\x26\x9f\xb4\xb9\x56\x9e\x09\x45\x76\xe9\x42\xda\x26\x2a\x46\x0c\x59\x15\x15\xbb\xdd\x9e\xd6\xee\x6b\xe5\x93\x5a\xca\x89\x96\x82\x2f\x32\x9c\x15\x17\xda\x4f\x2c\x39\x52\x7e\xa9\xc5\x75\x55\xb1\x50\xd0\x6b\x24\x5c\x5b\xca\x95\x4b\x70\xb3\x14\x33\x7b\xeb\x5a\x59\xca\xb5\x2a\x92\x37\x48\xf6\xc8\xf3\xbd\x27\xcd\xbd\x63\x6d\xa9\x10\x92\x62\x93\x46\xcb\xba\xa2\xf3\x90\x88\x28\x89\x7d\x0c\x01\x46\xdc\xa6\x9d\xd2\x52\x0a\x54\x41\x7f\xc2\x7c\x99\x21\xde\x21\xd2\xb0\xc4\xf2\x4b\x25\x17\x19\xbc\xad\x57\xa6\x46\xdb\xe1\x3e\xcb\xfc\x4d\xb4\xf5\x19\xde\xfd\xf8\xee\xc7\x08\x65\x33\x93\xa1\x3e\xda\x6b\xae\x65\x86\xcf\x27\x93\xff\x1f\x29\xf5\xdc\x6c\x45\x9b\x1d\x3f\x83\xf6\xf7\x83\x2d\x68\x15\x79\x2b\xf8\x76\xdf\x62\x34\x29\x1a\x52\xe4\xdc\xc4\xea\x39\x65\x91\x7a\xe9\xbd\xf9\x17\xf9\x78\x09\x30\x5d\x5a\x4b\x62\xd2\x97\x43\x49\xeb\xca\xcf\xfb\x3f\xef\x0f\x96\x1d\x2f\x29\xb8\xf3\x71\x36\x9b\x44\x02\xa1\x84\x17\x4c\x9e\x90\x64\x8b\x29\x71\xad\x72\x97\xe1\xa7\xd8\x34\x34\xa0\xae\xfd\x52\xf8\x2e\x92\xb9\x9a\x73\x72\x6e\x56\x5a\x72\xa5\x96\x79\x86\x83\x48\x5a\x30\x21\x6b\x4b\x91\x74\x65\x6b\xc9\xe9\xda\x72\x72\x71\x58\x52\x54\xc2\xbb\x61\xa0\x15\x55\xda\x2e\x32\xbc\x3b\xf8\xeb\xb9\x18\xb4\xce\xef\x35\xb9\x75\x6d\x6e\xea\x0c\x07\xfb\xfb\xd5\x56\x8c\xbf\xed\x2f\x21\x22\xfe\x75\x8c\x0d\x0e\xc9\x86\xec\x9f\xce\x46\x47\xbc\x6e\x27\x85\x56\x9e\xbe\x0e\xca\x68\xac\x68\x84\xa4\x5b\xca\xd7\x08\xf0\x3c\xdf\x4a\xed\xbc\x4b\x03\x47\x9f\x21\x5b\xab\x14\x05\x43\xaa\xc1\xc5\xd1\xf9\x78\x3a\xbe\xfa\x6d\x7c\x05\xa6\x72\x1c\x7f\xfa\x3c\x9d\x8d\xaf\xbe\x9c\x5c\x9e\x1f\x9d\x5d\x80\x59\xfa\x5e\xa4\xa4\x9a\x4d\x37\x02\xd2\xd9\xf1\x78\x1a\x39\xb1\x83\xe3\x30\x7b\xa0\x2d\xda\x33\x00\x8e\x0c\xb3\xcc\x53\x0e\x29\x9c\x87\x2e\xfa\xb1\xea\x06\x56\x17\x97\xb3\x71\x86\x53\x6d\xa1\xf4\xfd\x1b\x90\x72\xb5\x25\xf8\x92\x1c\xb5\x6e\x59\x92\xcc\x8b\x86\xba\xd3\xe5\x3d\x0a\x6d\x41\x8c\x97\x43\xc1\x9b\x01\x26\x53\x60\x52\x30\x87\x7b\xe1\xcb\x80\xb5\x1e\xaf\xab\x8b\x42\x7c\xc5\xbd\x90\x12\x4c\x3a\x8d\x39\x81\xe5\x39\xe5\x6f\x23\x9c\x86\xc9\x9a\x32\x24\x6d\xad\x53\x4b\xb7\xc2\x79\xbb\x78\xbb\x3a\x3f\xd6\x04\xae\xe1\xc9\xc6\x20\x8e\x52\xb7\x37\x17\x6a\x6f\xce\x5c\x19\xad\xa5\x3c\xfa\xf1\x2d\x0e\xe2\x87\x4d\x75\xb4\x35\x4a\x6b\x0d\x23\x0c\x05\x8a\x8d\x62\xb2\x5a\x66\xf0\xf2\x2e\x84\xb4\xfb\xea\xbf\x7a\xee\x90\x9a\xd7\xef\x41\x5f\x85\xc7\xfe\x4b\xcc\xc6\x57\xe7\xb1\xfa\xe5\x64\x7c\x31\xfd\x78\x76\x3a\xfb\x72\x7e\x74\xf5\xef\xf1\xd5\x61\xb2\x0a\xec\x96\x14\xb5\xa5\x1b\xf2\x23\x89\xcc\x3f\x5e\x4e\x67\xd3\x2f\xa7\x67\x9f\xc6\x87\xc9\xaa\xe9\x62\x8d\xd9\xf8\x7c\xb2\xa1\xf0\xd6\x57\x26\x89\xdd\x38\x3b\x9d\x1e\xbe\x7c\x83\x97\xed\x79\x80\xd4\x22\x65\xcb\x3e\xc1\x87\x0f\x1f\x90\xec\x3e\xf4\xdd\xf6\x38\xb0\xdc\xc1\x39\xbb\x23\xb0\xf6\xf8\xd7\x96\xd9\x05\x02\x2f\x56\x35\xd7\x32\xef\xf8\xd2\xae\xbf\x74\x60\xde\x5b\x31\xaf\x3d\xb9\xb8\xcc\xdc\x20\x2d\x90\xa6\x2b\x69\xaa\x95\x5c\x84\x8d\x57\x41\x3e\x26\xe1\xf7\x32\xa4\xa1\x27\xf7\x65\xd8\x37\xb0\xf8\x3d\x72\x3d\x18\x3f\x39\x71\x19\xba\x38\x3d\x82\x6b\xf8\x17\x61\xdc\x40\x1c\x9a\xd9\x35\x1c\x42\x05\xf8\x3e\xee\xeb\x5f\x6f\x1e\x93\x0d\xa8\x10\xf1\x29\x79\x5e\xf6\xf9\xc1\xd9\x04\x85\xd5\x15\xb8\xac\x9d\x27\x1b\x06\x1a\x44\x01\xb3\x36\x85\xba\x4f\x18\x77\xf8\x6a\xf7\x55\x2e\x6e\xf1\x6b\xb2\xfb\xb0\x9a\x07\x8f\x09\xfe\xe2\x4a\x6d\x7d\xeb\x42\xc3\x1f\xdf\xee\x3e\x0c\xe9\xf2\x98\xbc\x7e\x3d\x5a\x87\x2b\x70\x7d\x8d\x64\xf7\x1f\x09\x52\xfa\x1d\xfb\x78\xf1\x22\xd8\xef\x08\xd3\xb9\x8f\x54\x11\xf6\x71\x73\xf3\x3e\xd4\x42\xad\x59\xa3\xcf\xc6\xf5\xd3\x9e\xc9\xcd\x61\xb2\xfb\xd0\x1b\xaf\x69\x17\x62\x98\x53\xad\x68\xe8\xce\x0e\x3e\x9b\x9c\x79\x8a\xc6\x1f\xda\x1a\x8a\x02\xf7\x84\x5b\xf2\x81\xcc\x22\x8f\x32\xe7\xd6\x00\xfe\x43\xdd\x34\x50\xda\xa3\xde\x00\xbb\x2f\x49\x85\x38\x6c\x7b\x26\x3c\x5d\x66\x96\x68\xba\xf6\xe1\xb4\xd0\x16\xcc\x08\xd4\x8a\x35\x4c\x48\x36\x17\x52\xf8\xc5\xda\x36\x53\xcf\x24\x81\x94\xb7\x82\x02\x50\x2d\xf3\xc0\x50\xe7\x43\x0b\x44\x1b\x8a\xa2\x6d\xe1\x7e\x07\xe1\x90\x93\x24\x4f\xf9\x68\x5b\x11\x1e\x76\xfa\x74\xfe\x71\xea\x77\xf0\xcf\x5a\xc8\x1c\x0c\x8a\xee\x23\x7e\x74\xad\x14\xc7\x1c\x78\xa4\x6b\x0b\x5e\x3b\xaf\xab\xa5\xd3\x85\x90\x9e\x2c\xe5\x21\xec\x35\xec\x5b\x4b\x06\x69\x83\x64\x07\xbb\x0f\xeb\x03\xa6\xa3\xd0\x80\x52\xbf\x3c\x43\xaa\xce\xd7\x23\x63\x48\xe5\xe8\x27\xd0\xca\x89\x40\x9c\xcd\xe3\x04\x1b\x9c\xfa\x21\xce\xcc\x16\x4e\x75\xfa\xc2\x04\xf5\xb6\x15\x5b\xe5\xae\x29\x6f\x1e\xb7\x1a\x00\xc4\x4b\x8d\xb6\x5f\x1f\x3b\xa3\xfe\x9f\x4d\xea\xe0\x3b\xa9\xf8\x65\x23\xf6\xf5\x4d\xda\x36\xdf\xb2\xb4\x91\xa3\xd9\xe5\xc9\x65\xb6\x85\x01\xcc\xeb\x2a\x3c\x44\xe4\x02\x5e\x83\x35\x5a\xe4\x60\x6a\x01\xa1\xb8\x56\x4e\x38\x4f\xca\x63\x4e\x25\x6b\x84\xb6\x1b\xa8\x57\x64\x64\x38\xc6\xb7\x75\x44\xa5\x73\x51\x08\xca\xd1\x74\x2f\xc5\xd0\x88\x8a\x28\x5f\x6b\x4f\x80\x57\x66\x2d\xcc\x8d\x1e\xf8\xf6\xed\x69\x02\x3f\xaf\xb7\x19\x75\xaf\x1b\xc8\x11\x58\x6b\xa9\xd2\x0d\xe5\xab\x58\xdb\xae\xe6\x96\x98\xa7\xbd\x8e\x3d\xed\xd5\x67\x35\xe7\xc1\xb5\x59\x80\x97\xb5\x1d\x92\x64\x6d\xde\x38\x49\x64\xf0\xd3\x3e\x5e\xe0\x9e\x89\x61\xcf\xd7\x2a\x1c\xc9\x9b\xa3\x7d\x50\xbc\xad\x17\xde\x67\x2f\xb1\xfd\x1d\x36\x57\xae\xbf\x60\x9e\x50\xc1\x6a\xd9\xef\x1e\xce\xe5\xe9\xe0\xb1\x1c\xbe\x39\x79\xf6\xf6\xae\x9e\x93\x55\x14\x4e\x39\xa1\xf7\xb4\xcb\x20\x85\xaa\xbf\x76\x1a\x4f\xaa\xdd\x25\x73\xb5\xf7\x1f\x3c\xe7\xba\xe5\x73\x66\x22\x67\x9f\xf9\x3b\xc0\xf2\x13\x9e\xaa\x61\x80\x29\xee\x68\x91\xa1\x7f\x68\x0e\xab\xda\x3d\x6c\xd6\x65\xcf\x5d\x7d\xc3\x5a\x7b\xf1\x1d\x6d\xc0\x6c\xb9\x09\x87\x4b\xd2\xc2\x50\x86\xd3\x15\x88\xd7\x32\x5c\x75\x84\x56\x4b\x47\x77\xfa\x45\x02\x93\x12\xe1\x95\xe7\x1d\x9c\x86\x2f\x99\xc7\xc9\xc5\x34\x04\xcd\xe4\x3d\x5b\xb8\xfe\xac\x85\x56\xad\x6e\x28\x8b\x5b\x3e\x33\xb4\x09\x28\xda\x66\x18\x87\x11\xef\x46\xff\x0b\x00\x00\xff\xff\xa3\x4f\xb2\x64\x6c\x11\x00\x00")

func assetsDnsDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsDaemonsetYaml,
		"assets/dns/daemonset.yaml",
	)
}

func assetsDnsDaemonsetYaml() (*asset, error) {
	bytes, err := assetsDnsDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/daemonset.yaml", size: 4460, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x51, 0xfc, 0xb5, 0x90, 0xa7, 0x4, 0xd8, 0x95, 0xb2, 0x50, 0x6, 0x69, 0xc2, 0xfa, 0x5a, 0x1a, 0x93, 0x9a, 0xc0, 0x5b, 0x49, 0x4f, 0xbb, 0x81, 0x13, 0x7, 0x67, 0x5c, 0x64, 0x31, 0x6b, 0x1b}}
	return a, nil
}

var _assetsDnsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x31\x0e\x84\x40\x08\x05\xd0\x9e\x53\x70\x81\x2d\xb6\xe5\x10\x96\xf6\x3f\xce\x37\x12\x33\x0c\x11\xe2\xf9\x7d\xb7\xc7\x30\xdd\x30\x59\x89\x83\x82\xf4\x9d\x4f\xf9\x0a\xd3\xf7\x2f\x93\x8d\x81\x86\x89\x6a\x60\xd2\x74\x25\xa3\x2e\x3f\xfb\x37\xa2\xe4\x0b\x00\x00\xff\xff\xc5\xeb\x57\x22\x3f\x00\x00\x00")

func assetsDnsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsNamespaceYaml,
		"assets/dns/namespace.yaml",
	)
}

func assetsDnsNamespaceYaml() (*asset, error) {
	bytes, err := assetsDnsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/namespace.yaml", size: 63, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0xa0, 0xb3, 0xfd, 0xd8, 0x92, 0x5, 0xcd, 0x15, 0x8a, 0x8b, 0x7, 0xa6, 0xdd, 0x6c, 0x1, 0x7f, 0x4, 0xce, 0x68, 0xb6, 0x1c, 0x1, 0x4d, 0xfc, 0x50, 0x12, 0xc2, 0x78, 0x49, 0x4, 0x9c}}
	return a, nil
}

var _assetsDnsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\xb1\x09\xc4\x30\x0c\x05\xd0\xde\x53\x68\x81\x2b\xae\x55\x77\x33\x1c\xa4\x17\xf2\x0f\x11\xc1\xb2\xb1\x14\xcf\x1f\x02\xe9\x1e\xbc\xd3\xbc\x32\xfd\x31\x97\x29\x7e\xaa\xfd\xf2\x2c\x32\x6c\xc3\x0c\xeb\xce\xb4\xbe\xa5\x21\xa5\x4a\x0a\x17\x22\x97\x06\xa6\xea\xf1\x3a\x86\x28\x98\xfa\x80\xc7\x61\x7b\x7e\x9e\xba\x03\x00\x00\xff\xff\x8e\x2c\xf1\x2e\x55\x00\x00\x00")

func assetsDnsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceAccountYaml,
		"assets/dns/service-account.yaml",
	)
}

func assetsDnsServiceAccountYaml() (*asset, error) {
	bytes, err := assetsDnsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service-account.yaml", size: 85, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0x12, 0x50, 0x4d, 0x67, 0x2f, 0x1b, 0x74, 0xa0, 0xa4, 0xbb, 0xa7, 0x59, 0xe9, 0x5a, 0xc6, 0xc1, 0x1a, 0xf8, 0x5f, 0xff, 0x5, 0xdb, 0xc, 0x10, 0x8b, 0xc1, 0x0, 0xcc, 0xf, 0x9f, 0x3a}}
	return a, nil
}

var _assetsDnsServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\xbb\x4e\x2c\x41\x0c\x44\xf3\xfe\x8a\x92\x6e\x3c\x57\x42\x88\xa4\x53\x48\x48\xd0\x48\x3c\x72\x6f\x4f\xb1\xb4\x70\x3f\xd4\xf6\x2c\xe2\xef\xd1\xce\x8a\x05\x02\x44\xe8\xaa\xe3\x63\xbf\xe6\xba\x44\xdc\x73\x1c\x72\x62\x90\x9e\x9f\x38\x2c\xb7\x1a\x71\xb8\x08\x85\x2e\x8b\xb8\xc4\x00\xfc\xc3\x9d\x14\x22\x1b\x8c\x0e\x71\x8c\xb5\x7a\x2e\x0c\x40\x95\x42\xeb\x92\x18\xd1\x3a\xab\xbd\xe4\x67\x9f\x96\x6a\x01\x50\xd9\x51\xed\xb8\x8f\x6f\x9d\xf4\x1e\x71\x04\xac\x33\x9d\xe4\x49\x57\x73\x8e\xdb\x19\x6f\x59\x15\x3b\x42\x56\x6f\x45\x3c\x27\x51\x7d\x47\x91\x2a\x7b\x2e\xff\x03\x60\x54\x26\x6f\xe3\x57\x2b\xd0\xdb\xf0\xed\xea\xb4\x3d\xf7\x19\x9f\x8a\x88\xab\xcb\x6d\x70\x19\x7b\xfa\xbc\x45\x67\x60\x34\x6f\xa9\x69\xc4\xe3\xcd\xfc\x53\x30\x79\xea\x7f\x4a\xbe\xa0\xb3\xe8\xe1\x7a\x0e\x1f\x01\x00\x00\xff\xff\x8f\xbd\x79\x05\x67\x01\x00\x00")

func assetsDnsServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceYaml,
		"assets/dns/service.yaml",
	)
}

func assetsDnsServiceYaml() (*asset, error) {
	bytes, err := assetsDnsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service.yaml", size: 359, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0x55, 0x8f, 0x6e, 0x7a, 0x45, 0x79, 0x7c, 0x22, 0x76, 0x51, 0xe8, 0x2d, 0x77, 0xbc, 0x68, 0xc4, 0x28, 0x31, 0x3b, 0xe, 0xd, 0x40, 0x7d, 0x9e, 0x99, 0x9c, 0xf1, 0x2d, 0xf7, 0xa, 0x59}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/cluster-dns-cr.yaml": assetsClusterDnsCrYaml,

	"assets/dns/cluster-role-binding.yaml": assetsDnsClusterRoleBindingYaml,

	"assets/dns/cluster-role.yaml": assetsDnsClusterRoleYaml,

	"assets/dns/configmap.yaml": assetsDnsConfigmapYaml,

	"assets/dns/daemonset.yaml": assetsDnsDaemonsetYaml,

	"assets/dns/namespace.yaml": assetsDnsNamespaceYaml,

	"assets/dns/service-account.yaml": assetsDnsServiceAccountYaml,

	"assets/dns/service.yaml": assetsDnsServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"cluster-dns-cr.yaml": {assetsClusterDnsCrYaml, map[string]*bintree{}},
		"dns": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsDnsClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsDnsClusterRoleYaml, map[string]*bintree{}},
			"configmap.yaml":            {assetsDnsConfigmapYaml, map[string]*bintree{}},
			"daemonset.yaml":            {assetsDnsDaemonsetYaml, map[string]*bintree{}},
			"namespace.yaml":            {assetsDnsNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml":      {assetsDnsServiceAccountYaml, map[string]*bintree{}},
			"service.yaml":              {assetsDnsServiceYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
