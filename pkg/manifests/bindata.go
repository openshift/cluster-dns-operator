// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster-dns-cr.yaml (373B)
// assets/dns/cluster-role-binding.yaml (223B)
// assets/dns/cluster-role.yaml (210B)
// assets/dns/configmap.yaml (414B)
// assets/dns/daemonset.yaml (4.27kB)
// assets/dns/namespace.yaml (189B)
// assets/dns/service-account.yaml (85B)
// assets/dns/service.yaml (359B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsClusterDnsCrYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\x48\x57\x5f\xd0\xb5\x69\x39\x8a\x6b\x10\x12\x12\xfd\x62\x6f\x2e\x0b\xce\xda\xf2\xae\x4f\x82\xaf\x47\x09\xa1\x01\x4a\x5b\x7a\x33\x6f\xf6\x80\x8b\x9a\x53\xce\xdc\x10\x8b\x4e\x72\x85\x55\x8e\x32\x49\xc4\x8d\x72\x67\x03\x35\x06\xd5\x9a\x85\x13\xc8\xd1\xba\xba\x2c\x3c\x04\xaa\xf2\xc2\xcd\xa4\xe8\x88\xa4\x36\x94\xca\x6a\xb3\x4c\x3e\x48\xb9\xbb\x9d\x28\xd7\x99\x4e\xe1\x5d\x34\x8d\xb8\xcf\xdd\x9c\xdb\xf9\xf1\x39\x2c\xec\x94\xc8\x69\x0c\x80\xd2\xc2\x23\x12\x4f\xd4\xb3\x07\xe0\x80\x07\xb5\xde\x18\x3e\x93\xa3\x68\xfe\x80\xcf\x8c\x52\xb9\x91\x97\x86\x48\x8a\xc4\x99\x9d\xb7\xff\x1d\x44\xfc\x4e\x5f\x2d\x50\x5e\xdf\x38\xfa\x10\x80\x49\x94\xb2\x7c\x72\xb3\xb5\xea\xf8\xd7\x71\xc7\x8f\x3b\x7e\x4c\x6a\x61\x1d\x3f\x6e\x26\xbb\xf2\xe5\x09\x62\xff\xec\x47\x37\xd1\xeb\xa6\x21\xbf\x2e\xb8\x96\xef\x99\xe7\xb2\x90\xe8\xf8\xf3\x1c\x72\x89\x94\xc3\x57\x00\x00\x00\xff\xff\xb3\xc6\xf2\x3f\x75\x01\x00\x00")

func assetsClusterDnsCrYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsClusterDnsCrYaml,
		"assets/cluster-dns-cr.yaml",
	)
}

func assetsClusterDnsCrYaml() (*asset, error) {
	bytes, err := assetsClusterDnsCrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/cluster-dns-cr.yaml", size: 373, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xeb, 0xba, 0x74, 0xf, 0xb3, 0xa7, 0x74, 0x80, 0x8, 0xba, 0xf, 0xb5, 0x3c, 0xaa, 0x52, 0x5f, 0xd4, 0x5f, 0x7c, 0x95, 0x4a, 0x53, 0x4b, 0x3c, 0xe1, 0xd9, 0x54, 0xcd, 0x57, 0x5e, 0xc8}}
	return a, nil
}

var _assetsDnsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x31\x8e\x83\x40\x0c\x05\xd0\x7e\x4e\xe1\x0b\xc0\x6a\xbb\xd5\x74\x9b\xdc\x80\x48\xe9\xcd\x8c\x09\x0e\x60\xa3\xb1\x87\x22\xa7\x8f\x10\x4a\x45\x3a\x17\xfe\xff\xfd\x89\x25\x47\xb8\xce\xd5\x9c\x4a\xa7\x33\x5d\x58\x32\xcb\x23\xe0\xca\x77\x2a\xc6\x2a\x11\x4a\x8f\xa9\xc5\xea\xa3\x16\x7e\xa1\xb3\x4a\x3b\xfd\x59\xcb\xfa\xb3\xfd\x86\x85\x1c\x33\x3a\xc6\x00\x00\x20\xb8\x50\x04\x5d\x49\x6c\xe4\xc1\x9b\x2c\x16\xac\xf6\x4f\x4a\x6e\x31\x34\x70\x78\x37\x2a\x1b\x27\xfa\x4f\x49\xab\x78\xf8\xc4\xf6\xe7\xe3\xb6\x15\xd3\xa9\xa7\xe8\x4c\x1d\x0d\x3b\x74\x9a\x1d\xbe\xd3\xef\x00\x00\x00\xff\xff\xfa\x62\xe7\x50\xdf\x00\x00\x00")

func assetsDnsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleBindingYaml,
		"assets/dns/cluster-role-binding.yaml",
	)
}

func assetsDnsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role-binding.yaml", size: 223, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xf6, 0x2a, 0x3b, 0x84, 0xd7, 0x3e, 0xc4, 0xe1, 0x70, 0x66, 0x31, 0xda, 0xc4, 0x2f, 0x53, 0x27, 0x29, 0x13, 0xfe, 0x80, 0x36, 0xc5, 0xa1, 0x70, 0xdc, 0x2d, 0xef, 0xcf, 0xe0, 0xc4, 0xeb}}
	return a, nil
}

var _assetsDnsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\xbd\x6e\xc5\x30\x08\x46\x77\x3f\x05\xba\x7b\x52\x75\xab\xbc\x76\xe8\xde\xa1\x3b\xd7\xa6\x0a\x8a\x03\x16\xe0\x54\xea\xd3\x5f\xe5\x67\x3b\xe7\x08\xf4\xad\x2c\x35\xc3\x67\x1b\x1e\x64\xdf\xda\x28\x61\xe7\x1f\x32\x67\x95\x0c\xf6\xc4\x32\xe3\x88\x45\x8d\xff\x31\x58\x65\x5e\x3f\x7c\x66\x7d\xdb\xdf\xd3\x46\x81\x15\x03\x73\x02\x10\xdc\x28\x83\x76\x12\x5f\xf8\x37\xa6\x2a\x9e\x6c\x34\xf2\x9c\x26\xc0\xce\x5f\xa6\xa3\xfb\x71\x39\xc1\xe3\x91\x00\x8c\x5c\x87\x15\xba\x1b\x49\xed\xca\x12\x7e\x9a\x93\xed\x5c\xe8\x92\xae\xf5\x82\x63\xc3\x3b\x5e\x7d\x27\x7b\xde\xbf\x8d\x3d\x4e\xf8\xc3\x28\x4b\x7a\x05\x00\x00\xff\xff\xcb\xdd\xd7\x2a\xd2\x00\x00\x00")

func assetsDnsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleYaml,
		"assets/dns/cluster-role.yaml",
	)
}

func assetsDnsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role.yaml", size: 210, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0xb2, 0x0, 0x7d, 0x4a, 0xd9, 0xf, 0x8, 0x44, 0xe7, 0xab, 0x82, 0xe4, 0x50, 0x94, 0xaa, 0x4e, 0xfd, 0xa0, 0x63, 0xba, 0x18, 0xcf, 0xeb, 0xa6, 0xe4, 0x2d, 0x4, 0x35, 0xd5, 0xc7, 0xd}}
	return a, nil
}

var _assetsDnsConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8c\xbd\x4e\x2b\x31\x10\x85\xfb\x7d\x8a\x23\xdd\x3a\x9b\x1b\xad\x82\x84\xdb\xd4\x50\xd2\x0f\xf6\x6c\x6c\xc5\x6b\x5b\x33\xe3\x08\x04\xbc\x3b\x0a\x11\x0b\x91\x98\xea\xfc\xcd\x77\x4a\x25\x38\x1c\x6a\x99\xd3\xf1\x81\xda\x40\x2d\x3d\xb1\x68\xaa\xc5\xe1\xbc\x1b\x16\x36\x0a\x64\xe4\x06\xe0\x1f\x1e\x69\x61\x24\x85\xb2\x81\x0c\xd2\x8b\xa5\x85\x07\xa0\xd0\xc2\xda\xc8\xb3\x43\x6d\x5c\x34\xa6\xd9\x36\xa1\xe8\xf0\xfd\x7b\xa8\xc2\x73\xca\xec\xf0\x3e\x00\xc0\xe8\xf6\xd3\x7e\xc2\xdb\x97\xb9\x1c\x8b\x54\xd1\xd5\x46\xa6\x6c\x71\xb5\xa7\xfe\xcc\x52\xd8\x58\xe1\x73\x57\x63\x19\x73\xf5\x94\x91\xca\x86\x42\x90\x91\xa4\x11\x52\xbb\xbb\x8a\x1f\xec\xe5\x5a\x0d\x8a\x54\x94\x7d\x17\xbe\x69\x7a\x53\x13\xa6\xe5\x26\x9c\x29\x67\x8b\x52\xfb\x31\xfe\x8d\x5f\xd7\x1f\xab\x6a\x52\x17\xb6\xc8\x5d\xe1\xee\x77\xfb\xe9\x77\xf1\xf2\x8a\x11\x5b\x36\xbf\x15\xd6\x9a\xcf\xa3\xaf\x65\x5e\x07\x9e\x7c\x64\x4c\xff\xd7\x40\x38\x57\x0a\xc3\x95\xff\x19\x00\x00\xff\xff\x9d\x46\xa5\xbd\x9e\x01\x00\x00")

func assetsDnsConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsConfigmapYaml,
		"assets/dns/configmap.yaml",
	)
}

func assetsDnsConfigmapYaml() (*asset, error) {
	bytes, err := assetsDnsConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/configmap.yaml", size: 414, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfc, 0x1, 0xd4, 0x58, 0x84, 0x9f, 0xd5, 0x7c, 0x6e, 0x3d, 0xae, 0xb7, 0x68, 0x6d, 0x82, 0x4e, 0x8d, 0x2c, 0x2e, 0x47, 0x59, 0xd1, 0x1, 0x2b, 0xaa, 0xfc, 0xbc, 0x7a, 0xa1, 0x89, 0x1e, 0x47}}
	return a, nil
}

var _assetsDnsDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xdf\x4f\xdc\x3a\x16\x7e\x9f\xbf\xe2\xbb\x01\x95\x56\xdb\x00\xd5\x55\xaf\xee\xa6\xe5\xee\x65\x61\xd8\xa2\x2d\x30\x62\xa6\x77\x1f\x10\xaa\x3c\xce\x09\xf1\xe2\xd8\x5e\xdb\x09\x1d\x51\xfe\xf7\x95\x13\x66\xc6\x99\x4c\xb9\x5a\x69\xf3\x02\xe3\x73\xce\xe7\xf3\xeb\x3b\xb6\xef\x85\xca\x33\x9c\x32\xaa\xb4\x9a\x92\x1f\x31\x23\xfe\x20\xeb\x84\x56\x19\x98\x31\xee\xa0\x79\x37\xaa\xc8\xb3\x9c\x79\x96\x8d\x80\x1d\x5c\xb2\x8a\x20\x1c\x1c\x79\x30\x0f\x5b\x2b\x2f\x2a\x1a\x01\x8a\x55\xe4\x0c\xe3\x94\x41\x1b\x52\xae\x14\x85\x4f\x73\xe5\x46\x80\x64\x73\x92\x2e\xd8\x23\x92\x31\x63\x32\x04\x05\x67\x88\x07\xa1\x23\x49\xdc\x6b\xdb\x29\x56\xcc\xf3\xf2\x73\x64\xb9\xd5\x16\xf0\x54\x19\xc9\x3c\x3d\x5b\x45\xce\x86\x4f\xf6\x00\x7e\x00\x01\x2c\x5d\x68\xff\x27\xdb\x08\x4e\xc7\x9c\xeb\x5a\xf9\x10\xef\x5a\x0f\x30\x56\x68\x2b\xfc\xe2\x44\x32\xe7\x3a\xa1\x5b\x38\x4f\x55\xaa\x74\x4e\x29\xb7\xc2\x0b\xce\xe4\xb3\x36\xd7\xca\x33\xa1\xc8\xae\x5c\x48\xdb\x44\xc5\x88\x21\xab\xa2\x62\x77\xdb\xd3\xda\x7d\xad\x7c\x52\x4b\x39\xd1\x52\xf0\x45\x86\xf3\xe2\x52\xfb\x89\x25\x47\xca\xaf\xb4\xb8\xae\x2a\x16\x0a\x7a\x83\x84\x6b\x4b\xb9\x72\x09\x6e\x57\x62\x66\xef\x5c\x2b\x4b\xb9\x56\x45\xf2\x16\xc9\x01\x79\x7e\xf0\xac\x79\x70\xa2\x2d\x15\x42\x52\x6c\xd2\x68\x59\x57\x74\x11\x12\x11\x25\x71\x19\x43\x80\x11\x77\x69\xa7\xb4\x92\x02\x55\xd0\x9f\x30\x5f\x66\x88\x77\x88\x34\x2c\xb1\xfc\x4a\xc9\x45\x06\x6f\xeb\xb5\xa9\xd1\xb6\xbf\xcf\x2a\x7f\x13\x6d\x7d\x86\xf7\x3f\xbf\xff\x39\x42\x19\x66\x32\xd4\x47\x7b\xcd\xb5\xcc\xf0\xe5\x74\xf2\xbf\x23\xa5\x9e\x9b\xad\x68\xb3\x93\x17\xd0\xfe\xfa\x6e\x0b\x5a\x45\xde\x0a\xbe\xdd\xb7\x18\x4d\x8a\x86\x14\x39\x37\xb1\x7a\x4e\x59\xa4\x5e\x7a\x6f\xfe\x41\x3e\x5e\x02\x4c\x97\xd6\x92\x98\xf4\x65\x5f\xd2\xba\xf2\xeb\xe1\xaf\x87\xbd\x65\xc7\x4b\x0a\xee\x7c\x9a\xcd\x26\x91\x40\x28\xe1\x05\x93\xa7\x24\xd9\x62\x4a\x5c\xab\xdc\x65\xf8\x25\x36\x0d\x0d\xa8\x6b\xbf\x12\xbe\x8f\x64\xae\xe6\x9c\x9c\x9b\x95\x96\x5c\xa9\x65\x9e\xe1\x5d\x24\x2d\x98\x90\xb5\xa5\x48\xfa\x7e\xd8\xfd\x1d\x5f\x2c\x39\x2d\x1b\xb2\xff\x77\x2e\x38\xe2\x75\xcb\x53\xad\x3c\x7d\xeb\x25\xd1\x58\xd1\x08\x49\x77\x94\x6f\xb4\xdf\xcb\xdd\x5e\x6a\xe7\x5d\x1a\x18\xf2\x42\xab\xb7\x4a\x51\x30\xa4\x1a\x5c\x1e\x5f\x8c\xa7\xe3\xeb\x3f\xc6\xd7\x60\x2a\xc7\xc9\xe7\x2f\xd3\xd9\xf8\xfa\xeb\xe9\xd5\xc5\xf1\xf9\x25\x98\xa5\x1f\x45\x4a\xaa\x19\xba\x11\x90\xce\x4f\xc6\xd3\xc8\x89\x1d\x9c\x04\xe6\x43\x5b\xb4\x13\x18\x8e\x0c\xb3\xcc\x53\x0e\x29\x9c\x87\x2e\x96\x43\xcd\xf5\xac\x2e\xaf\x66\xe3\x0c\x67\xda\x42\xe9\x87\xb7\x20\xe5\x6a\x4b\xf0\x25\x39\x6a\xdd\xb2\x24\x99\x17\x0d\x75\xb3\xfd\x03\x0a\x6d\x41\x8c\x97\x7d\xc1\xdb\x1e\x26\x53\x60\x52\x30\x87\x07\xe1\xcb\x80\xb5\x19\xaf\xab\x8b\x42\x7c\xc3\x83\x90\x12\x4c\x3a\x8d\x39\x81\xe5\x39\xe5\xfb\x11\x4e\xc3\x64\x4d\x19\x92\xb6\xd6\xa9\xa5\x3b\xe1\xbc\x5d\xec\xaf\xa7\xf7\x86\xc0\x35\x3c\x19\x8c\xc1\x28\x75\x07\x73\xa1\x0e\xe6\xcc\x95\xd1\x5a\xca\xa3\x1f\xdf\xe3\x20\x7e\x1a\xaa\xa3\xad\x51\x5a\x6b\x18\x61\x28\x34\xf8\x28\xa6\x8a\x65\x06\x7b\xf7\x21\xa4\xdd\xd7\xff\xd6\x73\x87\xd4\xbc\xf9\x00\xfa\x26\x3c\x0e\xf7\x30\x1b\x5f\x5f\xc4\xea\x57\x93\xf1\xe5\xf4\xd3\xf9\xd9\xec\xeb\xc5\xf1\xf5\x3f\xc7\xd7\x47\xc9\x3a\xb0\x3b\x52\xd4\x96\xae\xcf\x8f\x24\x32\xff\x74\x35\x9d\x4d\xbf\x9e\x9d\x7f\x1e\x1f\x25\xeb\xa6\x8b\x35\x66\xe3\x8b\xc9\x40\x61\xdf\x57\x26\x89\xdd\x38\x3f\x9b\x1e\xed\xbd\xc5\x5e\x3b\x8d\x91\x5a\xa4\x6c\xd5\x27\xf8\xf8\xf1\x23\x92\xdd\xc7\x65\xb7\x3d\xf5\x2c\x77\x70\xc1\xee\x09\xac\x3d\x7c\xb5\x65\x76\x81\xc0\x8b\x75\xcd\xb5\xcc\x3b\xbe\xb4\xeb\x7b\x0e\xcc\x7b\x2b\xe6\xb5\x27\x17\x97\x99\x1b\xa4\x05\xd2\x74\x2d\x4d\xb5\x92\x8b\xb0\xf1\x3a\xc8\xa7\x24\xfc\x5e\x85\xd4\xf7\xe4\xa1\x0c\xfb\x06\x16\x7f\x40\xae\x7b\x83\x2f\x27\x2e\x43\x17\xa7\xc7\x70\x0d\xff\x2a\x8c\xeb\x89\x43\x33\xbb\x86\x43\xa8\x00\xbf\x8c\xfb\xe6\xf7\xdb\xa7\x64\x00\x15\x22\x3e\x23\xcf\xcb\x65\x7e\x70\x3e\x41\x61\x75\x05\x2e\x6b\xe7\xc9\x86\x81\x06\x51\xc0\x6c\x4c\xa1\xee\x13\xc6\x1d\xbd\xde\x7d\x9d\x8b\x3b\xfc\x9e\xec\x3e\xae\xe7\xc1\x53\x82\xbf\xb8\x52\x5b\xdf\xba\xd0\xf0\xa7\xfd\xdd\xc7\x3e\x5d\x9e\x92\x37\x6f\x46\x9b\x70\x05\x6e\x6e\x90\xec\xfe\x2d\x41\x4a\xff\xc1\x21\x5e\xbd\x0a\xf6\x3b\xc2\x74\xee\x23\x55\x84\x43\xdc\xde\x7e\x08\xb5\x50\x1b\xd6\x58\x66\xe3\xe6\x79\xcf\xe4\xf6\x28\xd9\x7d\x5c\x1a\x6f\x68\x17\xa2\x9f\x53\xad\xa8\xef\xce\x0e\xbe\x98\x9c\x79\x8a\xc6\x1f\xda\x1a\x8a\x02\x0f\x84\x3b\xf2\x81\xcc\x22\x8f\x32\xe7\x36\x00\xfe\x45\xdd\x34\x50\xda\xa3\x1e\x80\x3d\x94\xa4\x42\x1c\xb6\x3d\x13\x9e\xaf\x12\x2b\x34\x5d\xfb\x70\x5a\x68\x0b\x66\x04\x6a\xc5\x1a\x26\x24\x9b\x0b\x29\xfc\x62\x63\x9b\xa9\x67\x92\x40\xca\x5b\x41\x01\xa8\x96\x79\x60\xa8\xf3\xa1\x05\xa2\x0d\x45\xd1\xb6\xf0\x72\x07\xe1\x90\x93\x24\x4f\xf9\x68\x5b\x11\x1e\x77\x96\xe9\xfc\xf3\xd4\xef\xe0\xef\xb5\x90\x39\x18\x14\x3d\x44\xfc\xe8\x5a\x29\x8e\x39\xf0\x48\xd7\x16\xbc\x76\x5e\x57\x2b\xa7\x0b\x21\x3d\x59\xca\x43\xd8\x1b\xd8\x77\x96\x0c\xd2\x06\xc9\x0e\x76\x1f\x37\x07\x4c\x47\xa1\x1e\xa5\x7e\x7b\x81\x54\x9d\xaf\xc7\xc6\x90\xca\xb1\x9c\x40\x6b\x27\x02\x71\x86\xc7\x09\x06\x9c\xfa\x29\xce\xcc\x16\x4e\x75\xfa\xc2\x04\xf5\xb6\x15\x5b\xe5\xae\x29\x6f\x9f\xb6\x1a\x00\xc4\x4b\x8d\xb6\x5f\x9f\x3a\xa3\xe5\x9f\x21\x75\xf0\x83\x54\xfc\x36\x88\x7d\x73\x93\xb6\xcd\xb7\x2c\x0d\x72\x34\xbb\x3a\xbd\xca\xb6\x30\x80\x79\x5d\x85\x67\x80\x5c\xc0\x6b\xb0\x46\x8b\x1c\x4c\x2d\x20\x14\xd7\xca\x09\xe7\x49\x79\xcc\xa9\x64\x8d\xd0\x76\x80\x7a\x4d\x46\x86\x63\x7c\x5b\x47\x54\x3a\x17\x85\xa0\x1c\x4d\xf7\x4e\x0b\x8d\xa8\x88\xf2\x8d\xf6\x04\x78\x65\x36\xc2\x1c\xf4\xc0\xf7\xef\xcf\x13\xf8\x65\xbd\x61\xd4\x4b\xdd\x40\x8e\xc0\x5a\x4b\x95\x6e\x28\x5f\xc7\xda\x76\x35\xb7\xc4\x3c\x1d\x74\xec\x69\xaf\x3e\xeb\x39\x0f\xae\xcd\x02\xbc\xac\x6d\x9f\x24\x1b\xf3\xc6\x49\x22\x83\x5f\x0e\xf1\x0a\x0f\x4c\xf4\x7b\xbe\x56\xe1\x48\x1e\x8e\xf6\xa8\x78\xb9\x72\xcb\x4b\xe2\x29\x15\xac\x96\x4b\x84\x70\xb6\x4e\x7b\xcf\xcd\xf0\xcd\xc9\xb3\xfd\xfb\x7a\x4e\x56\x51\x38\xa9\x84\x3e\xd0\x2e\x83\x14\xaa\xfe\xd6\x69\x3c\xab\x76\x17\xc5\xf5\x1d\xf1\x4f\x1e\x44\xdd\xf2\x05\x33\xd1\x2d\xf4\x85\x97\xf4\xea\x13\x9e\x2a\xd7\xbb\xfe\xa7\xb8\xa7\x45\x86\xe5\x53\xad\x5f\x99\xee\x69\xb0\x29\x7b\xe9\xfa\x1a\xd6\xda\xcb\xeb\x68\x00\xb3\xe5\x36\x1b\x2e\x3a\x0b\x43\x19\xce\xd6\x20\x5e\xcb\x70\x5d\x11\x5a\xad\x1c\xdd\x59\x2e\x12\x98\x94\x08\xef\x24\xef\xe0\x34\x7c\xc9\x3c\x4e\x2f\xa7\x21\x68\x26\x1f\xd8\xc2\x2d\xcf\x4b\x68\xd5\xea\x86\xb2\xb8\xd5\x53\x41\x9b\x80\xa2\x6d\x86\x71\x18\xd3\x6e\xf4\xdf\x00\x00\x00\xff\xff\xb8\xf3\xba\xc3\xae\x10\x00\x00")

func assetsDnsDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsDaemonsetYaml,
		"assets/dns/daemonset.yaml",
	)
}

func assetsDnsDaemonsetYaml() (*asset, error) {
	bytes, err := assetsDnsDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/daemonset.yaml", size: 4270, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0x78, 0xa, 0xac, 0xd2, 0xad, 0x80, 0x74, 0xf, 0x1, 0x9a, 0x2a, 0x4c, 0x6d, 0xc2, 0xb6, 0x6c, 0x4, 0xcc, 0xb2, 0x7d, 0x87, 0xfa, 0xf1, 0x1a, 0xbf, 0x2, 0xfe, 0x3e, 0x42, 0xff, 0xdf}}
	return a, nil
}

var _assetsDnsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\x3b\x8e\xc3\x30\x0c\x44\x7b\x9d\x62\xe0\xad\xbd\x9f\x56\x87\xd8\x32\x3d\x1d\x4d\x62\xc2\x12\x25\x98\xb2\xce\x1f\x38\x08\xdc\xce\x1b\xbc\xb7\xa9\xa5\x88\x7f\x29\xf4\x26\x77\x06\x69\x7a\xe3\xee\x5a\x2d\x62\xfc\x85\xc2\x2e\x49\xba\xc4\x00\x98\x14\x46\xd4\x46\xf3\x55\x1f\x7d\x4e\xe6\x01\xc8\xb2\x30\xfb\xc9\x81\x2f\x38\x3b\x86\xe4\x83\xe8\x15\x32\xaa\x26\x24\x36\x5a\x52\x7b\xa2\x1a\xb6\x63\x21\x24\x15\xf5\x33\x81\xbe\x4a\xff\x1c\xfc\xc4\x97\x1c\xd2\xd4\xdf\xce\x6b\xfa\xd6\xfa\xb3\x1f\x36\x67\x0e\xe6\x88\xe9\x77\x0a\xaf\x00\x00\x00\xff\xff\x90\x81\x4e\xed\xbd\x00\x00\x00")

func assetsDnsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsNamespaceYaml,
		"assets/dns/namespace.yaml",
	)
}

func assetsDnsNamespaceYaml() (*asset, error) {
	bytes, err := assetsDnsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/namespace.yaml", size: 189, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc7, 0xcc, 0xc6, 0xb2, 0x81, 0xa0, 0x7d, 0xc5, 0x5b, 0x8f, 0xf3, 0xd1, 0xf1, 0xee, 0x65, 0x3d, 0x0, 0x7c, 0x93, 0x89, 0x1c, 0x38, 0xd0, 0x9, 0x86, 0x1a, 0xd6, 0xef, 0x5, 0xee, 0x70, 0xe8}}
	return a, nil
}

var _assetsDnsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\xb1\x09\xc4\x30\x0c\x05\xd0\xde\x53\x68\x81\x2b\xae\x55\x77\x33\x1c\xa4\x17\xf2\x0f\x11\xc1\xb2\xb1\x14\xcf\x1f\x02\xe9\x1e\xbc\xd3\xbc\x32\xfd\x31\x97\x29\x7e\xaa\xfd\xf2\x2c\x32\x6c\xc3\x0c\xeb\xce\xb4\xbe\xa5\x21\xa5\x4a\x0a\x17\x22\x97\x06\xa6\xea\xf1\x3a\x86\x28\x98\xfa\x80\xc7\x61\x7b\x7e\x9e\xba\x03\x00\x00\xff\xff\x8e\x2c\xf1\x2e\x55\x00\x00\x00")

func assetsDnsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceAccountYaml,
		"assets/dns/service-account.yaml",
	)
}

func assetsDnsServiceAccountYaml() (*asset, error) {
	bytes, err := assetsDnsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service-account.yaml", size: 85, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0x12, 0x50, 0x4d, 0x67, 0x2f, 0x1b, 0x74, 0xa0, 0xa4, 0xbb, 0xa7, 0x59, 0xe9, 0x5a, 0xc6, 0xc1, 0x1a, 0xf8, 0x5f, 0xff, 0x5, 0xdb, 0xc, 0x10, 0x8b, 0xc1, 0x0, 0xcc, 0xf, 0x9f, 0x3a}}
	return a, nil
}

var _assetsDnsServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\xbb\x4e\x2c\x41\x0c\x44\xf3\xfe\x8a\x92\x6e\x3c\x57\x42\x88\xa4\x53\x48\x48\xd0\x48\x3c\x72\x6f\x4f\xb1\xb4\x70\x3f\xd4\xf6\x2c\xe2\xef\xd1\xce\x8a\x05\x02\x44\xe8\xaa\xe3\x63\xbf\xe6\xba\x44\xdc\x73\x1c\x72\x62\x90\x9e\x9f\x38\x2c\xb7\x1a\x71\xb8\x08\x85\x2e\x8b\xb8\xc4\x00\xfc\xc3\x9d\x14\x22\x1b\x8c\x0e\x71\x8c\xb5\x7a\x2e\x0c\x40\x95\x42\xeb\x92\x18\xd1\x3a\xab\xbd\xe4\x67\x9f\x96\x6a\x01\x50\xd9\x51\xed\xb8\x8f\x6f\x9d\xf4\x1e\x71\x04\xac\x33\x9d\xe4\x49\x57\x73\x8e\xdb\x19\x6f\x59\x15\x3b\x42\x56\x6f\x45\x3c\x27\x51\x7d\x47\x91\x2a\x7b\x2e\xff\x03\x60\x54\x26\x6f\xe3\x57\x2b\xd0\xdb\xf0\xed\xea\xb4\x3d\xf7\x19\x9f\x8a\x88\xab\xcb\x6d\x70\x19\x7b\xfa\xbc\x45\x67\x60\x34\x6f\xa9\x69\xc4\xe3\xcd\xfc\x53\x30\x79\xea\x7f\x4a\xbe\xa0\xb3\xe8\xe1\x7a\x0e\x1f\x01\x00\x00\xff\xff\x8f\xbd\x79\x05\x67\x01\x00\x00")

func assetsDnsServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceYaml,
		"assets/dns/service.yaml",
	)
}

func assetsDnsServiceYaml() (*asset, error) {
	bytes, err := assetsDnsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service.yaml", size: 359, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0x55, 0x8f, 0x6e, 0x7a, 0x45, 0x79, 0x7c, 0x22, 0x76, 0x51, 0xe8, 0x2d, 0x77, 0xbc, 0x68, 0xc4, 0x28, 0x31, 0x3b, 0xe, 0xd, 0x40, 0x7d, 0x9e, 0x99, 0x9c, 0xf1, 0x2d, 0xf7, 0xa, 0x59}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/cluster-dns-cr.yaml": assetsClusterDnsCrYaml,

	"assets/dns/cluster-role-binding.yaml": assetsDnsClusterRoleBindingYaml,

	"assets/dns/cluster-role.yaml": assetsDnsClusterRoleYaml,

	"assets/dns/configmap.yaml": assetsDnsConfigmapYaml,

	"assets/dns/daemonset.yaml": assetsDnsDaemonsetYaml,

	"assets/dns/namespace.yaml": assetsDnsNamespaceYaml,

	"assets/dns/service-account.yaml": assetsDnsServiceAccountYaml,

	"assets/dns/service.yaml": assetsDnsServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"cluster-dns-cr.yaml": {assetsClusterDnsCrYaml, map[string]*bintree{}},
		"dns": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsDnsClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsDnsClusterRoleYaml, map[string]*bintree{}},
			"configmap.yaml":            {assetsDnsConfigmapYaml, map[string]*bintree{}},
			"daemonset.yaml":            {assetsDnsDaemonsetYaml, map[string]*bintree{}},
			"namespace.yaml":            {assetsDnsNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml":      {assetsDnsServiceAccountYaml, map[string]*bintree{}},
			"service.yaml":              {assetsDnsServiceYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
